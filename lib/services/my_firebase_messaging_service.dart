import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter/foundation.dart';

class MyFirebaseMessagingService {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  late FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin;

  MyFirebaseMessagingService() {
    print("üî• Inicializando servicio de notificaciones");
  }

  /// üî• **Inicializar servicio de notificaciones**
  Future<void> initNotifications() async {
    _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

    // Configuraci√≥n para Android
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    final InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
    );

    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) {
        if (response.payload != null) {
          _abrirEnlace(response.payload!);
        }
      },
    );

    // üî• Crear canal de notificaci√≥n para Android
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'high_importance_channel', // ID del canal
      'Notificaciones Importantes', // Nombre del canal
      importance: Importance.max,
    );

    await _flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);

    // ‚úÖ **Verificar permisos cada vez que la app inicia**
    await checkPermissions();

    // ‚úÖ Suscripci√≥n a un tema y obtener token
    await subscribeToTopic("all");
    await getToken();

    // üî• Escuchar notificaciones en diferentes estados
    FirebaseMessaging.onMessage.listen(_onMessage);
    FirebaseMessaging.onMessageOpenedApp.listen(_onMessageOpened);
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  }

  /// üìå **Verificar permisos y solicitarlos si fueron denegados**
  Future<void> checkPermissions() async {
    NotificationSettings settings = await _firebaseMessaging.getNotificationSettings();

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      print('‚úÖ Ya tienes permisos de notificaci√≥n.');
    } else if (settings.authorizationStatus == AuthorizationStatus.denied) {
      print('‚ùå Permisos denegados, volviendo a solicitar...');
      await _solicitarPermisos();
    } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
      print('‚ö†Ô∏è Permisos provisionales otorgados.');
    } else {
      print('üîî Permisos a√∫n no solicitados, pidiendo ahora...');
      await _solicitarPermisos();
    }
  }

  /// üìå **Solicitar permisos de notificaci√≥n**
  Future<void> _solicitarPermisos() async {
    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      print('üîî Permisos concedidos');
    } else if (settings.authorizationStatus == AuthorizationStatus.denied) {
      print('‚ùå Permisos denegados nuevamente. Considera redirigir al usuario a configuraci√≥n.');
    }
  }

  Future<void> subscribeToTopic(String topic) async {
    await _firebaseMessaging.subscribeToTopic(topic);
    print("üìå Suscrito al tema '$topic'");
  }

  Future<void> getToken() async {
    String? token = await _firebaseMessaging.getToken();
    print("üî• Token FCM: $token");
  }

  /// üì© **Manejo de notificaciones en primer plano**
  void _onMessage(RemoteMessage message) {
    print("üì© Notificaci√≥n en primer plano: ${message.notification?.title}");
    _showNotification(message);
  }

  /// üì© **Manejo cuando se abre una notificaci√≥n**
  void _onMessageOpened(RemoteMessage message) {
    print("üì© Notificaci√≥n abierta: ${message.notification?.title}");
    
    String? url = message.data['link'];
    if (url != null && url.isNotEmpty) {
      _abrirEnlace(url);
    }
  }

  /// üîπ **Abrir un enlace en el navegador**
  void _abrirEnlace(String url) async {
    final Uri uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri);
    } else {
      print("‚ùå No se pudo abrir la URL: $url");
    }
  }

  /// üì© **Manejo de notificaciones en segundo plano**
  static Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
    print("üì© Mensaje en segundo plano: ${message.notification?.title}");
  }

  /// üîî **Mostrar notificaci√≥n localmente**
  Future<void> _showNotification(RemoteMessage message) async {
    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'high_importance_channel', // ID del canal
      'Notificaciones Importantes', // Nombre del canal
      importance: Importance.max,
      priority: Priority.high,
      showWhen: true,
    );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidDetails,
    );

    await _flutterLocalNotificationsPlugin.show(
      0, // ID de la notificaci√≥n
      message.notification?.title ?? "Sin t√≠tulo",
      message.notification?.body ?? "Sin contenido",
      platformChannelSpecifics,
      payload: message.data['link'], // Pasamos el link como payload
    );
  }
}
